#!/bin/bash
# beakermeup v1 created 07 February 2019 
# By Joel Savitz <jsavitz@redhat.com>
#
# Purpose: Enter a beaker instance and set it up if needed
# v1.1 update on 5 March 2019: Single command configure & connect, simple history mechanism

# I want to keep a local database of my beaker machines and their relative states
# this is TODO

VERSION=2
SUCCESS=0
E_INCORRECT_USAGE=1
E_CONNECTION_FAILED=2

# Reasonable default, won't throw any errors
DEFAULT_USER='root'

DEFAULT_OFFSET=0

# Unreasonable default, should and expected to throw a visible error 
DEFAULT_HOST='invalid_host_generic_string_wontwork_longname_willnotice'

DEAFAULT_BEAKERMEUP_STACKFILE=~/beakermeup_stackfile

# Set inital values to defaults
USER="$DEFAULT_USER"
HOST="$DEFAULT_HOST"
OFFSET="$DEFAULT_OFFSET"

# Useful tools located at these urls, will clone

RH_ENGINEER_REPO_NAME='rh-engineer'
BASH_SCRIPTS_REPO_NAME='bash-scripts'
VIM_PORTABILITY_SUITE_REPO_NAME='vim-portability-suite'

RH_ENGINEER_INSTALL_SCRIPT='rh-engineer_install.sh'
BASH_SCRIPTS_INSTALL_SCRIPT='install.sh'

RH_ENGINEER_GIT_URL="git://git.engineering.redhat.com/users/prarit/$RH_ENGINEER_REPO_NAME/.git"
BASH_SCRIPTS_GIT_URL="https://github.com/theyoyojo/$BASH_SCRIPTS_REPO_NAME"
VIM_PORTABILITY_SUITE_GIT_URL="https://github.com/theyoyojo/$VIM_PORTABILITY_SUITE_REPO_NAME"

# for easy reconnect
BEAKERMEUP_STACKFILE="$DEAFAULT_BEAKERMEUP_STACKFILE"

usage() {
	echo "Usage: `basename $0` <remote_address> <optional_username>"
	echo "	-t <int> specify offset into history"
	echo "	-l list history"
	echo "  -c clear history"
	exit $E_INCORRECT_USAGE
}

hello_there() {
	printf "Hello there, user. I am  `basename $0` v%s\n" $VERSION
}

check_history() {
	if [ ! -f ~/beakermeup_most_recent_host ]
	then	
		echo "Record of previous session does not exist! See usage:"
		usage
	fi
	MOST_RECENT_HOST=$(cat ~/beakermeup_most_recent_host)
}

beakermeup_stack_size() {
	return $(cat $BEAKERMEUP_STACKFILE | wc -l)
}

beakermeup_stack_push() {
	## TODO
	return 0
}


beakermeup_stack_pop() {
	## TODO
	return 0
}

beakermeup_stack_access() {
	if [ -z "$1" ] || [[ "$1" =~ "^[0-9]+" ]]
	then
		usage
	fi

	HOST=$(awk "NR==$1" "$BEAKERMEUP_STACKFILE")

	return 0
}

beakermeup_stack_top () {
	return beakermeup_stack_access 0
}

check_args_and_handle() {


	while getopts "t:cl" OPTION
	do case ${OPTION} in
		t)
			if ! [[ $OPTARG =~ "^[0-9]+" ]]
			then
				echo "Error: offset must be an integer"
				usage
			fi
			OFFSET="$OPTARG"
			# TODO implement this one
			;;
		l)
			# TODO check if file exists
			cat "$BEAKERMEUP_STACKFILE"
			exit "$SUCCESS"
			;;
		c)
			rm -f "$BEAKERMEUP_STACKFILE"
			echo "Cleared beakermeup history"
			exit "$SUCCESS"
			;;
		*)
			echo "Unknown option \'$OPTION\'"
			;;
	esac done
	shift $((OPTIND -1))

	# Handle first argument: Hostname
	if [ -z $1 ]
	then
		# Sets host
		beakermeup_stack_top
	else
		HOST="$1"
	fi

	# Handle optional second argument: Username
	# Defaults to root if none supplied
	if [ ! -z $2 ]
	then
		USER="$2"
	fi
}

# The setup script should really not be in a herefile
remote_setup_exec() {
	local GIT_NAME="$(git config --get user.name)"
	local GIT_EMAIL="$(git config --get user.email)"
	local PLAINTEXT_PASSWORD_INSECURE=

	# If there is a file named ezpass in the working directory at runtime
	#+then the password of the new account will be set to the contents of
	#+the file
	if [ -f "ezpass" ]
	then
		PLAINTEXT_PASSWORD_INSECURE=`cat ezpass`
	fi

	echo "Connecting to $USER@$HOST..."

	ssh "$USER@$HOST" "bash -s" <<EOF
ERROR=
# Setup the absolute basics
yum install -y git gcc gcc-c++ make vim cmake 
yum install -y python3-devel ncurses-devel flex bison openssl-devel elfutils-libelf-devel 
yum install -y bc cscope libudev-devel wget openssl tar dwarves
git config --global user.name "$GIT_NAME"
git config --global user.email "$GIT_EMAIL"


# Autopimp my vim
if [ ! -d $VIM_PORTABILITY_SUITE_REPO_NAME ]
then
	git clone "$VIM_PORTABILITY_SUITE_GIT_URL"
	bash "$VIM_PORTABILITY_SUITE_REPO_NAME"/install.sh
fi

# Install my bash scripts
echo "Installing Joel Savitz' bash scripts from remote..."
if [ ! -d $BASH_SCRIPTS_REPO_NAME ]
then
	git clone "$BASH_SCRIPTS_GIT_URL"
	cd "$BASH_SCRIPTS_REPO_NAME"
	./"$BASH_SCRIPTS_INSTALL_SCRIPT"
	cd ~
fi

# The r3volution will not be televised
bash -c "/root/bash-scripts/prod/extendo_patronum"

# Sudo up boys
echo "%sudo	ALL=(ALL)	NOPASSWD: ALL" | sudo EDITOR="tee -a" visudo
NEWUSER=$(tr '@' '\n' <<<$GIT_EMAIL | head -1)
useradd \$NEWUSER
groupadd sudo
usermod -G sudo \$NEWUSER
if [ ! -z "$PLAINTEXT_PASSWORD_INSECURE" ]
then
	echo $PLAINTEXT_PASSWORD_INSECURE | passwd \$NEWUSER --stdin
fi

ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -P ""

# place a mark in ~ to signify that this script reached the end
if [ -z \$ERROR ]
then
	touch ~/beakermeup_was_here
fi

EOF

	# Report a connection failure
	if [ $? -ne 0 ]
	then
		echo "Connection to $USER@$HOST failed!"
		exit $E_CONNECTION_FAILED
	fi
}

check_if_machine_is_configured() {
	scp $USER@$HOST:~/beakermeup_was_here /tmp
	is_configured=$?
	if [ $is_configured ]
	then
		rm /tmp/beakermeup_was_here
	fi
	return $is_configured
}

# At this point, we can guarentee that the host value is valid,
#+else we would have quit with an error earlier in control flow
start_session() {
	if ! `grep $HOST $BEAKERMEUP_STACKFILE 2>&1 >/dev/null`
	then
		echo "$HOST" >> $BEAKERMEUP_STACKFILE
	fi
	reset && ssh $USER@$HOST
}

hello_there
check_args_and_handle $@
is_configured=
for ((;;))
do
	check_if_machine_is_configured
	if [ "$is_configured" == "0" ]
	then
		break
	else
		remote_setup_exec
	fi
done

start_session

exit $SUCCESS
